name: Build GKI

on:
  workflow_call:
    inputs:
      TODO:
        type: string
      KSU:
        type: string
      KSU_SUSFS:
        type: string
      KSU_MANUAL_HOOK:
        type: string
      BUILD_BOOTIMG:
        type: string
      LAST_BUILD:
        type: string

  workflow_dispatch:
    inputs:
      TODO:
        description: To do
        default: ""
        type: choice
        options:
          - "kernel"
          - "defconfig"

      KSU:
        description: KernelSU variant
        default: ""
        type: choice
        options:
          - "None"
          - "Next"
          - "Suki"

      KSU_SUSFS:
        description: Include SUSFS?
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

      KSU_MANUAL_HOOK:
        description: Use KSU Manual Hooks?
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Determine Build Status
        run: |
          if [ "${{ toJson(github.event.inputs) }}" == "null" ]; then
            echo "STATUS=RELEASE" >> $GITHUB_ENV
            echo "TRIGGER=workflow_call" >> $GITHUB_ENV
          else
            echo "STATUS=BETA" >> $GITHUB_ENV
            echo "TRIGGER=workflow_dispatch" >> $GITHUB_ENV
          fi

      - name: Validate Inputs and Secrets
        env:
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }} # telegram chat id
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }} # telegram bot token
          GH_TOKEN: ${{ secrets.GH_TOKEN }} # github token
          KSU: ${{ inputs.KSU }}
          KSU_SUSFS: ${{ inputs.KSU_SUSFS }}
          KSU_MANUAL_HOOK: ${{ inputs.KSU_MANUAL_HOOK }}
        run: |
          _error() {
              echo "::error::❌ ERROR: $*";    
              ((ret++));
          }

          ret=0

          # Check secrets
          [[ -z "$TG_CHAT_ID" ]]   && _error "Missing TG_CHAT_ID secret (Telegram Chat ID)"     && ((ret++))
          [[ -z "$TG_BOT_TOKEN" ]] && _error "Missing TG_BOT_TOKEN secret (Telegram Bot Token)" && ((ret++))
          [[ -z "$GH_TOKEN" ]];    && _error "Missing GH_TOKEN secret (GitHub PAT)"             && ((ret++))

          # Check KernelSU variants
          [[ $KSU == "None" && $KSU_SUSFS == "true" ]]       && _error "Cannot use SuSFS without KernelSU"             && ((ret++))
          [[ $KSU == "None" && $KSU_MANUAL_HOOK == "true" ]] && _error "Cannot use KSU Manual Hooks without KernelSU!" && ((ret++))

          if ((ret)); then
            exit $ret
          fi

      - name: Install Dependencies
        run: |
          export MAN_DISABLE=true DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -qq
          sudo apt-get install -qq bc cpio flex bison aptitude gh git python3 \
                              tar perl wget curl lz4 zstd libarchive-tools aria2 ccache
          sudo aptitude install -y libssl-dev
          python3 -m pip install lxml

      - name: Prepare ccache
        run: |
          echo "CCACHE_DIR=$HOME/.ccache" >> "$GITHUB_ENV"
          echo "CCACHE_COMPILERCHECK=content" >> "$GITHUB_ENV"
          echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE" >> "$GITHUB_ENV"
          mkdir -p "$HOME/.ccache"
          ccache --version
      
      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.job }}-${{ github.ref_name }}
          restore-keys: |
            ccache-${{ github.job }}-

      - name: Configure ccache
        run: |
          ccache --set-config=max_size=5G
          ccache --set-config=compression=true
          ccache --set-config=compression_level=3
          ccache --zero-stats
          ccache --show-config

      - name: Run Build Script
        env:
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }} # telegram chat id
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }} # telegram bot token
          GH_TOKEN: ${{ secrets.GH_TOKEN }} # github token
          KSU: ${{ inputs.KSU }}
          KSU_SUSFS: ${{ inputs.KSU_SUSFS }}
          KSU_MANUAL_HOOK: ${{ inputs.KSU_MANUAL_HOOK }}
          BUILD_BOOTIMG: ${{ inputs.BUILD_BOOTIMG }}
          LAST_BUILD: ${{ inputs.LAST_BUILD }}
          TODO: ${{ inputs.TODO }}
        run: |
          export GIT_CLONE_PROTECTION_ACTIVE=false
          chmod +x *.sh
          ./build.sh

      - name: Upload Artifacts (ZIP & IMG)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_NAME }}-${{ github.run_number }}
          path: |
            artifacts/*.zip
            artifacts/*.img

      - name: Upload Artifacts (Info File)
        uses: actions/upload-artifact@v4
        with:
          name: info-${{ github.run_number }}
          path: artifacts/*.txt
